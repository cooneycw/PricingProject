"""
Django settings for PricingProject project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import socket
import ast
import os
from pathlib import Path
from .secrets import get_secrets, DEV


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(f'BASE_DIR is {BASE_DIR}')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
IPADD = socket.gethostbyname(socket.gethostname())
ec2 = True
#if IPADD in ('192.168.5.72', '127.0.1.1', '127.0.0.1') or DEV == 'True':
#    ec2 = False

if ec2:
    DEBUG = False
    BASE_URL = 'https://essent.ai'
else:
    DEBUG = True # was True
    BASE_URL = 'http://127.0.0.1:8000'

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
print(f'DEBUG: {DEBUG}  STATIC_ROOT: {STATIC_ROOT}')

print(f'EC2 environment: {ec2}  Ip address:{IPADD}  Dev: {DEV}')

secret = get_secrets()
secret_dict = ast.literal_eval(secret)

SECRET_KEY = secret_dict['DJANGO_SECRET_KEY']

POSTGRES_PORT = secret_dict['POSTGRES_PORT']
POSTGRES_HOST = secret_dict['POSTGRES_HOST']

if DEBUG:
    POSTGRES_PORT = secret_dict['POSTGRES_PORT_DEV']
    POSTGRES_HOST = secret_dict['POSTGRES_HOST_DEV']

ALLOWED_HOSTS = ['127.0.0.1', 'essent.ai', 'www.essent.ai']

# CSRF_TRUSTED_ORIGINS = ["https://the6ixclan.ca"]
if DEBUG:
    CSRF_TRUSTED_ORIGINS = ["https://essent.ai", "http://essent.ai", "http://localhost:8000", "http://127.0.0.1:8000"]
else:
    CSRF_TRUSTED_ORIGINS = ["https://essent.ai", "http://essent.ai"]

# Application definition
print('csrf')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django_extensions',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap4',
    'Pricing.apps.PricingConfig',
    'users.apps.UsersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PricingProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PricingProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': secret_dict['POSTGRES_DB'],
        'USER': secret_dict['POSTGRES_USER'],
        'PASSWORD': secret_dict['POSTGRES_PASSWORD'],
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'Pricing-home'
LOGIN_URL = 'login'
STATIC_URL = '/static/'
print(f'STATIC_URL: {STATIC_URL}')
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CONFIG_MAX_TYPES = 10
CONFIG_AVG_PLAYERS = 5
CONFIG_STD_DEV = 2 / 5
CONFIG_OBSERVABLE = False
CONFIG_FRESH_PREFS = 3
